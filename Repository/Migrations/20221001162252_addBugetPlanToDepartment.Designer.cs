// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221001162252_addBugetPlanToDepartment")]
    partial class addBugetPlanToDepartment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.BugetPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("April")
                        .HasColumnType("money");

                    b.Property<decimal>("August")
                        .HasColumnType("money");

                    b.Property<decimal>("December")
                        .HasColumnType("money");

                    b.Property<int>("DeparmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("February")
                        .HasColumnType("money");

                    b.Property<decimal>("January")
                        .HasColumnType("money");

                    b.Property<decimal>("July")
                        .HasColumnType("money");

                    b.Property<decimal>("June")
                        .HasColumnType("money");

                    b.Property<decimal>("March")
                        .HasColumnType("money");

                    b.Property<decimal>("May")
                        .HasColumnType("money");

                    b.Property<decimal>("November")
                        .HasColumnType("money");

                    b.Property<decimal>("October")
                        .HasColumnType("money");

                    b.Property<decimal>("September")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("bugetPlans");
                });

            modelBuilder.Entity("Domain.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BugetPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("budget")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BugetPlanId")
                        .IsUnique();

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Domain.Model.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Confirm")
                        .HasColumnType("boolean");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("EmploeeId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("employeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("employeeId");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("Domain.Model.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Limit")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("expenseTypes");
                });

            modelBuilder.Entity("Domain.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "user"
                        },
                        new
                        {
                            Id = 1,
                            Name = "owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "accountant"
                        });
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Domain.Model.Employee", b =>
                {
                    b.HasBaseType("Domain.Model.User");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Domain.Model.Department", b =>
                {
                    b.HasOne("Domain.Model.BugetPlan", "bugetPlan")
                        .WithOne("Department")
                        .HasForeignKey("Domain.Model.Department", "BugetPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bugetPlan");
                });

            modelBuilder.Entity("Domain.Model.Expense", b =>
                {
                    b.HasOne("Domain.Model.Department", "department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ExpenseType", "expenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("employee");

                    b.Navigation("expenseType");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.HasOne("Domain.Model.Role", "Role")
                        .WithMany("users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Model.Employee", b =>
                {
                    b.HasOne("Domain.Model.Department", "Department")
                        .WithMany("employees")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Model.BugetPlan", b =>
                {
                    b.Navigation("Department")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.Department", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("Domain.Model.Role", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
